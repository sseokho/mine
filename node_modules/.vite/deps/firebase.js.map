{
  "version": 3,
  "sources": ["../../@firebase/database/src/core/version.ts", "../../@firebase/database/src/core/storage/DOMStorageWrapper.ts", "../../@firebase/database/src/core/storage/MemoryStorage.ts", "../../@firebase/database/src/core/storage/storage.ts", "../../@firebase/database/src/core/util/util.ts", "../../@firebase/database/src/core/AppCheckTokenProvider.ts", "../../@firebase/database/src/core/AuthTokenProvider.ts", "../../@firebase/database/src/realtime/Constants.ts", "../../@firebase/database/src/core/RepoInfo.ts", "../../@firebase/database/src/core/stats/StatsCollection.ts", "../../@firebase/database/src/core/stats/StatsManager.ts", "../../@firebase/database/src/realtime/polling/PacketReceiver.ts", "../../@firebase/database/src/realtime/BrowserPollConnection.ts", "../../@firebase/database/src/realtime/WebSocketConnection.ts", "../../@firebase/database/src/realtime/TransportManager.ts", "../../@firebase/database/src/realtime/Connection.ts", "../../@firebase/database/src/core/ServerActions.ts", "../../@firebase/database/src/core/util/EventEmitter.ts", "../../@firebase/database/src/core/util/OnlineMonitor.ts", "../../@firebase/database/src/core/util/Path.ts", "../../@firebase/database/src/core/util/VisibilityMonitor.ts", "../../@firebase/database/src/core/PersistentConnection.ts", "../../@firebase/database/src/core/snap/Node.ts", "../../@firebase/database/src/core/snap/indexes/Index.ts", "../../@firebase/database/src/core/snap/indexes/KeyIndex.ts", "../../@firebase/database/src/core/util/SortedMap.ts", "../../@firebase/database/src/core/snap/comparators.ts", "../../@firebase/database/src/core/snap/snap.ts", "../../@firebase/database/src/core/snap/LeafNode.ts", "../../@firebase/database/src/core/snap/indexes/PriorityIndex.ts", "../../@firebase/database/src/core/snap/childSet.ts", "../../@firebase/database/src/core/snap/IndexMap.ts", "../../@firebase/database/src/core/snap/ChildrenNode.ts", "../../@firebase/database/src/core/snap/nodeFromJSON.ts", "../../@firebase/database/src/core/snap/indexes/PathIndex.ts", "../../@firebase/database/src/core/snap/indexes/ValueIndex.ts", "../../@firebase/database/src/core/util/NextPushId.ts", "../../@firebase/database/src/core/view/Change.ts", "../../@firebase/database/src/core/view/filter/IndexedFilter.ts", "../../@firebase/database/src/core/view/filter/RangedFilter.ts", "../../@firebase/database/src/core/view/filter/LimitedFilter.ts", "../../@firebase/database/src/core/view/QueryParams.ts", "../../@firebase/database/src/core/ReadonlyRestClient.ts", "../../@firebase/database/src/core/SnapshotHolder.ts", "../../@firebase/database/src/core/SparseSnapshotTree.ts", "../../@firebase/database/src/core/stats/StatsListener.ts", "../../@firebase/database/src/core/stats/StatsReporter.ts", "../../@firebase/database/src/core/operation/Operation.ts", "../../@firebase/database/src/core/operation/AckUserWrite.ts", "../../@firebase/database/src/core/operation/ListenComplete.ts", "../../@firebase/database/src/core/operation/Overwrite.ts", "../../@firebase/database/src/core/operation/Merge.ts", "../../@firebase/database/src/core/view/CacheNode.ts", "../../@firebase/database/src/core/view/EventGenerator.ts", "../../@firebase/database/src/core/view/ViewCache.ts", "../../@firebase/database/src/core/util/ImmutableTree.ts", "../../@firebase/database/src/core/CompoundWrite.ts", "../../@firebase/database/src/core/WriteTree.ts", "../../@firebase/database/src/core/view/ChildChangeAccumulator.ts", "../../@firebase/database/src/core/view/CompleteChildSource.ts", "../../@firebase/database/src/core/view/ViewProcessor.ts", "../../@firebase/database/src/core/view/View.ts", "../../@firebase/database/src/core/SyncPoint.ts", "../../@firebase/database/src/core/SyncTree.ts", "../../@firebase/database/src/core/util/ServerValues.ts", "../../@firebase/database/src/core/util/Tree.ts", "../../@firebase/database/src/core/util/validation.ts", "../../@firebase/database/src/core/view/EventQueue.ts", "../../@firebase/database/src/core/Repo.ts", "../../@firebase/database/src/core/util/libs/parser.ts", "../../@firebase/database/src/core/view/Event.ts", "../../@firebase/database/src/core/view/EventRegistration.ts", "../../@firebase/database/src/exp/OnDisconnect.ts", "../../@firebase/database/src/exp/Reference_impl.ts", "../../@firebase/database/src/exp/Database.ts", "../../@firebase/database/src/exp/ServerValue.ts", "../../@firebase/database/src/exp/Transaction.ts", "../../@firebase/database/src/api/onDisconnect.ts", "../../@firebase/database/src/api/TransactionResult.ts", "../../@firebase/database/src/api/Reference.ts", "../../@firebase/database/src/api/Database.ts", "../../@firebase/database/src/api/internal.ts", "../../@firebase/database/src/api/test_access.ts", "../../@firebase/database/index.ts", "../../@firebase/firestore/index.bundle.ts", "../../@firebase/functions/src/api/error.ts", "../../@firebase/functions/src/context.ts", "../../@firebase/functions/src/serializer.ts", "../../@firebase/functions/src/api/service.ts", "../../@firebase/functions/src/config.ts", "../../@firebase/functions/index.ts", "../../idb/lib/idb.mjs", "../../@firebase/installations/src/util/constants.ts", "../../@firebase/installations/src/util/errors.ts", "../../@firebase/installations/src/api/common.ts", "../../@firebase/installations/src/api/create-installation-request.ts", "../../@firebase/installations/src/util/sleep.ts", "../../@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts", "../../@firebase/installations/src/helpers/generate-fid.ts", "../../@firebase/installations/src/util/get-key.ts", "../../@firebase/installations/src/helpers/fid-changed.ts", "../../@firebase/installations/src/helpers/idb-manager.ts", "../../@firebase/installations/src/helpers/get-installation-entry.ts", "../../@firebase/installations/src/api/generate-auth-token-request.ts", "../../@firebase/installations/src/helpers/refresh-auth-token.ts", "../../@firebase/installations/src/functions/get-id.ts", "../../@firebase/installations/src/functions/get-token.ts", "../../@firebase/installations/src/api/delete-installation-request.ts", "../../@firebase/installations/src/functions/delete-installation.ts", "../../@firebase/installations/src/functions/on-id-change.ts", "../../@firebase/installations/src/helpers/extract-app-config.ts", "../../@firebase/installations/src/index.ts", "../../@firebase/messaging/src/util/errors.ts", "../../@firebase/messaging/src/util/constants.ts", "../../@firebase/messaging/src/interfaces/internal-message-payload.ts", "../../@firebase/messaging/src/helpers/array-base64-translator.ts", "../../@firebase/messaging/src/helpers/migrate-old-database.ts", "../../@firebase/messaging/src/helpers/idb-manager.ts", "../../@firebase/messaging/src/core/api.ts", "../../@firebase/messaging/src/core/token-management.ts", "../../@firebase/messaging/src/helpers/externalizePayload.ts", "../../@firebase/messaging/src/helpers/is-console-message.ts", "../../@firebase/messaging/src/helpers/sleep.ts", "../../@firebase/messaging/src/controllers/sw-controller.ts", "../../@firebase/messaging/src/controllers/window-controller.ts", "../../@firebase/messaging/src/helpers/extract-app-config.ts", "../../@firebase/messaging/src/index.ts", "../../@firebase/storage/src/implementation/constants.ts", "../../@firebase/storage/src/implementation/error.ts", "../../@firebase/storage/src/platform/browser/base64.ts", "../../@firebase/storage/src/implementation/string.ts", "../../@firebase/storage/src/implementation/taskenums.ts", "../../@firebase/storage/src/implementation/connection.ts", "../../@firebase/storage/src/platform/browser/connection.ts", "../../@firebase/storage/src/implementation/connectionPool.ts", "../../@firebase/storage/src/implementation/location.ts", "../../@firebase/storage/src/implementation/failrequest.ts", "../../@firebase/storage/src/implementation/backoff.ts", "../../@firebase/storage/src/implementation/type.ts", "../../@firebase/storage/src/implementation/url.ts", "../../@firebase/storage/src/implementation/request.ts", "../../@firebase/storage/src/implementation/fs.ts", "../../@firebase/storage/src/implementation/blob.ts", "../../@firebase/storage/src/implementation/json.ts", "../../@firebase/storage/src/implementation/path.ts", "../../@firebase/storage/src/implementation/metadata.ts", "../../@firebase/storage/src/implementation/list.ts", "../../@firebase/storage/src/implementation/requestinfo.ts", "../../@firebase/storage/src/implementation/requests.ts", "../../@firebase/storage/src/implementation/observer.ts", "../../@firebase/storage/src/implementation/async.ts", "../../@firebase/storage/src/task.ts", "../../@firebase/storage/src/reference.ts", "../../@firebase/storage/src/service.ts", "../../@firebase/storage/exp/api.ts", "../../@firebase/storage/compat/tasksnapshot.ts", "../../@firebase/storage/compat/task.ts", "../../@firebase/storage/compat/list.ts", "../../@firebase/storage/compat/reference.ts", "../../@firebase/storage/compat/service.ts", "../../@firebase/storage/index.ts", "../../@firebase/performance/src/constants.ts", "../../@firebase/performance/src/utils/errors.ts", "../../@firebase/performance/src/utils/console_logger.ts", "../../@firebase/performance/src/services/api_service.ts", "../../@firebase/performance/src/utils/string_merger.ts", "../../@firebase/performance/src/services/settings_service.ts", "../../@firebase/performance/src/services/iid_service.ts", "../../@firebase/performance/src/utils/attributes_utils.ts", "../../@firebase/performance/src/services/remote_config_service.ts", "../../@firebase/performance/src/services/initialization_service.ts", "../../@firebase/performance/src/services/transport_service.ts", "../../@firebase/performance/src/services/perf_logger.ts", "../../@firebase/performance/src/utils/metric_utils.ts", "../../@firebase/performance/src/resources/trace.ts", "../../@firebase/performance/src/resources/network_request.ts", "../../@firebase/performance/src/services/oob_resources_service.ts", "../../@firebase/performance/src/controllers/perf.ts", "../../@firebase/performance/index.ts", "../../@firebase/analytics/src/constants.ts", "../../@firebase/analytics/src/functions.ts", "../../@firebase/analytics/src/logger.ts", "../../@firebase/analytics/src/helpers.ts", "../../@firebase/analytics/src/errors.ts", "../../@firebase/analytics/src/get-config.ts", "../../@firebase/analytics/src/initialize-ids.ts", "../../@firebase/analytics/src/factory.ts", "../../@firebase/analytics/index.ts", "../../@firebase/remote-config/src/client/caching_client.ts", "../../@firebase/remote-config/src/errors.ts", "../../@firebase/remote-config/src/language.ts", "../../@firebase/remote-config/src/client/rest_client.ts", "../../@firebase/remote-config/src/client/remote_config_fetch_client.ts", "../../@firebase/remote-config/src/value.ts", "../../@firebase/remote-config/src/remote_config.ts", "../../@firebase/remote-config/src/storage/storage.ts", "../../@firebase/remote-config/src/storage/storage_cache.ts", "../../@firebase/remote-config/src/client/retrying_client.ts", "../../@firebase/remote-config/index.ts", "../../@firebase/app-check/src/errors.ts", "../../@firebase/app-check/src/state.ts", "../../@firebase/app-check/src/constants.ts", "../../@firebase/app-check/src/proactive-refresh.ts", "../../@firebase/app-check/src/util.ts", "../../@firebase/app-check/src/client.ts", "../../@firebase/app-check/src/indexeddb.ts", "../../@firebase/app-check/src/logger.ts", "../../@firebase/app-check/src/storage.ts", "../../@firebase/app-check/src/debug.ts", "../../@firebase/app-check/src/internal-api.ts", "../../@firebase/app-check/src/recaptcha.ts", "../../@firebase/app-check/src/providers.ts", "../../@firebase/app-check/src/api.ts", "../../@firebase/app-check/src/factory.ts", "../../@firebase/app-check/src/index.ts", "../../firebase/app/index.ts", "../../firebase/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\n\n// TODO: revert to import { QueryContext } from '../view/EventRegistration'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype QueryContext = any;\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            pathPopFront(relativePath),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(\n            writesCache,\n            changePath,\n            oldEventSnap.getNode(),\n            serverNode\n          );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(\n  queryKey: string\n): { queryId: string; path: Path } {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, 'eventType') +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentName: string,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../exp/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../exp/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n *  to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A promise which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app-exp';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches Repo instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing repo in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a database instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The FirebaseApp associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `FirebaseDatabase` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database-exp').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of Firebase.transaction.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `transaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A Promise that can optionally be used instead of the onComplete\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Compat } from '@firebase/util';\n\nimport { Indexable } from '../core/util/misc';\nimport { warn } from '../core/util/util';\n\n// TODO: revert to import { OnDisconnect as ExpOnDisconnect } from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpOnDisconnect = any;\n\nexport class OnDisconnect implements Compat<ExpOnDisconnect> {\n  constructor(readonly _delegate: ExpOnDisconnect) {}\n\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'OnDisconnect.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount } from '@firebase/util';\n\nimport { DataSnapshot } from './Reference';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Compat,\n  Deferred,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\n\nimport {\n  OnDisconnect as ExpOnDisconnect,\n  off,\n  onChildAdded,\n  onChildChanged,\n  onChildMoved,\n  onChildRemoved,\n  onValue,\n  EventType,\n  limitToFirst,\n  query,\n  limitToLast,\n  orderByChild,\n  orderByKey,\n  orderByValue,\n  orderByPriority,\n  startAt,\n  startAfter,\n  endAt,\n  endBefore,\n  equalTo,\n  get,\n  set,\n  update,\n  setWithPriority,\n  remove,\n  setPriority,\n  push,\n  runTransaction,\n  _QueryImpl,\n  _ReferenceImpl,\n  child\n} from '../../exp/index'; // import from the exp public API\nimport { warn } from '../core/util/util';\nimport {\n  validateBoolean,\n  validateEventType,\n  validatePathString,\n  validateWritablePath\n} from '../core/util/validation';\nimport { UserCallback } from '../core/view/EventRegistration';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { ThenableReferenceImpl } from '../exp/Reference_impl';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\n\n// TODO: revert to import {  DataSnapshot as ExpDataSnapshot, Query as ExpQuery,\n// Reference as ExpReference,} from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype ExpDataSnapshot = any;\ntype ExpQuery = any;\ntype ExpReference = any;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot implements Compat<ExpDataSnapshot> {\n  constructor(\n    readonly _database: Database,\n    readonly _delegate: ExpDataSnapshot\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @returns Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param path - Path to a child.\n   * @returns DataSnapshot for child node.\n   */\n  child(path: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param path - Path to a child.\n   * @returns Whether the child exists.\n   */\n  hasChild(path: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @returns The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param action - Callback function to be called\n   * for each child.\n   * @returns True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (snapshot: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot =>\n      action(new DataSnapshot(this._database, expDataSnapshot))\n    );\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n\n  get key() {\n    return this._delegate.key;\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @returns The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n\n  /**\n   * @returns The Firebase reference for the location this snapshot's data came\n   * from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n\nexport interface SnapshotCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query implements Compat<ExpQuery> {\n  constructor(readonly database: Database, readonly _delegate: ExpQuery) {}\n\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      callback.call(\n        ret.context,\n        new DataSnapshot(this.database, expSnapshot),\n        previousChildName\n      );\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = ret.cancel?.bind(ret.context);\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(\n          errorPrefix('Query.on', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n  }\n\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback: UserCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType as EventType, valueCallback);\n    } else {\n      off(this._delegate, eventType as EventType | undefined);\n    }\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   */\n  once(\n    eventType: string,\n    callback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n    const deferred = new Deferred<DataSnapshot>();\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (error: Error) => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(\n          errorPrefix('Query.once', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAt(value, name))\n    );\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAfter(value, name))\n    );\n  }\n\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, endBefore(value, name))\n    );\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, equalTo(value, name))\n    );\n  }\n\n  /**\n   * @returns URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param fnName - The function name (on or once)\n   *\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | undefined; context: object | undefined } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: undefined, context: undefined };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 'cancelOrContext') +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return new Reference(\n      this.database,\n      new _ReferenceImpl(this._delegate._repo, this._delegate._path)\n    );\n  }\n}\n\nexport class Reference extends Query implements Compat<ExpReference> {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   */\n  constructor(readonly database: Database, readonly _delegate: ExpReference) {\n    super(\n      database,\n      new _QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)\n    );\n  }\n\n  /** @returns {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n\n  child(pathString: string): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n\n  /** @returns {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n\n  /** @returns {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n\n  set(\n    newVal: unknown,\n    onComplete?: (error: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    values: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n\n    if (Array.isArray(values)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'Reference.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  transaction(\n    transactionUpdate: (currentData: unknown) => unknown,\n    onComplete?: (\n      error: Error | null,\n      committed: boolean,\n      dataSnapshot: DataSnapshot | null\n    ) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback(\n      'Reference.transaction',\n      'transactionUpdate',\n      transactionUpdate,\n      false\n    );\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean(\n      'Reference.transaction',\n      'applyLocally',\n      applyLocally,\n      true\n    );\n\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(\n      transactionResult =>\n        new TransactionResult(\n          transactionResult.committed,\n          new DataSnapshot(this.database, transactionResult.snapshot)\n        )\n    );\n    if (onComplete) {\n      result.then(\n        transactionResult =>\n          onComplete(\n            null,\n            transactionResult.committed,\n            transactionResult.snapshot\n          ),\n        error => onComplete(error, false, null)\n      );\n    }\n    return result;\n  }\n\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n\n    const expPromise = push(this._delegate, value) as ThenableReferenceImpl;\n    const promise = expPromise.then(\n      expRef => new Reference(this.database, expRef)\n    );\n\n    if (onComplete) {\n      promise.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(\n      new ExpOnDisconnect(this._delegate._repo, this._delegate._path)\n    );\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  validateArgCount,\n  Compat,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport {\n  goOnline,\n  connectDatabaseEmulator,\n  goOffline,\n  ref,\n  refFromURL,\n  increment,\n  serverTimestamp\n} from '../../exp/index'; // import from the exp public API\n\nimport { Reference } from './Reference';\n\n// TODO: revert to import {FirebaseDatabase as ExpDatabase} from '@firebase/database' once modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpDatabase = any;\n\n/**\n * Class representing a firebase database.\n */\nexport class Database implements FirebaseService, Compat<ExpDatabase> {\n  static readonly ServerValue = {\n    TIMESTAMP: serverTimestamp(),\n    increment: (delta: number) => increment(delta)\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   */\n  constructor(readonly _delegate: ExpDatabase, readonly app: FirebaseApp) {}\n\n  INTERNAL = {\n    delete: () => this._delegate._delete()\n  };\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host - the emulator host (ex: localhost)\n   * @param port - the emulator port (ex: 8080)\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n   */\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions;\n    } = {}\n  ): void {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param path - The relative string path or an existing Reference to a database\n   * location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @returns Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @returns Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  Provider\n} from '@firebase/component';\nimport * as types from '@firebase/database-types';\n\nimport { _repoManagerDatabaseFromApp } from '../../exp/index';\nimport {\n  repoInterceptServerData,\n  repoStats,\n  repoStatsIncrementCounter\n} from '../core/Repo';\nimport { setSDKVersion } from '../core/version';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { Database } from './Database';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  const connection = ref._delegate._repo.persistentConnection_;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (connection as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  repoStats(ref._delegate._repo, showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  repoStatsIncrementCounter(ref._delegate._repo, metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref._delegate._repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return repoInterceptServerData(ref._delegate._repo, callback);\n};\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAuthImpl - custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: new Database(\n      _repoManagerDatabaseFromApp(\n        app,\n        authProvider,\n        /* appCheckProvider= */ undefined,\n        url,\n        nodeAdmin\n      ),\n      app\n    ) as types.Database,\n    namespace\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { repoManagerForceRestClient } from '../exp/Database';\nimport { Connection } from '../realtime/Connection';\n\nimport { Query } from './Reference';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\nexport const queryIdentifier = function (query: Query) {\n  return query._delegate._queryIdentifier;\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport * as types from '@firebase/database-types';\nimport { isNodeSdk } from '@firebase/util';\n\nimport { name, version } from './package.json';\nimport { Database } from './src/api/Database';\nimport * as INTERNAL from './src/api/internal';\nimport { DataSnapshot, Query, Reference } from './src/api/Reference';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { enableLogging } from './src/core/util/util';\nimport { setSDKVersion } from './src/core/version';\nimport { repoManagerDatabaseFromApp } from './src/exp/Database';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n\n        return new Database(\n          repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url),\n          app\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/Reference';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Firestore, loadBundle, namedQuery } from './export';\n\n/**\n * Prototype patches bundle loading to Firestore.\n */\nexport function registerBundle(instance: typeof Firestore): void {\n  instance.prototype.loadBundle = loadBundle;\n  instance.prototype.namedQuery = namedQuery;\n}\n\nregisterBundle(Firestore);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n", "import {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\n\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (data instanceof Date) {\n      return data.toISOString();\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    private appCheckProvider: Provider<AppCheckInternalComponentName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Modify this instance to communicate with the Cloud Functions emulator.\n   *\n   * Note: this must be called before this instance has been used to do any operations.\n   *\n   * @param host The emulator host (ex: localhost)\n   * @param port The emulator port (ex: 5001)\n   */\n  useEmulator(host: string, port: number): void {\n    this.emulatorOrigin = `http://${host}:${port}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @deprecated Prefer the useEmulator(host, port) method.\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    const appCheckToken = await this.getAppCheckToken();\n    if (appCheckToken !== null) {\n      headers['X-Firebase-AppCheck'] = appCheckToken;\n    }\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  private async getAppCheckToken(): Promise<string | null> {\n    const appCheck = this.appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // If getToken() fails, it will still return a dummy token that also has\n      // an error field containing the error message. We will send any token\n      // provided here and show an error if/when it is rejected by the functions\n      // endpoint.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    { instanceIdentifier: regionOrCustomDomain }: InstanceFactoryOptions\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      appCheckProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport * as types from '@firebase/functions-types';\nimport { registerFunctions } from './src/config';\n\nimport { name, version } from './package.json';\n\nregisterFunctions(firebase as _FirebaseNamespace, fetch.bind(self));\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    functions?: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions?(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n", "function toArray(arr) {\n  return Array.prototype.slice.call(arr);\n}\n\nfunction promisifyRequest(request) {\n  return new Promise(function(resolve, reject) {\n    request.onsuccess = function() {\n      resolve(request.result);\n    };\n\n    request.onerror = function() {\n      reject(request.error);\n    };\n  });\n}\n\nfunction promisifyRequestCall(obj, method, args) {\n  var request;\n  var p = new Promise(function(resolve, reject) {\n    request = obj[method].apply(obj, args);\n    promisifyRequest(request).then(resolve, reject);\n  });\n\n  p.request = request;\n  return p;\n}\n\nfunction promisifyCursorRequestCall(obj, method, args) {\n  var p = promisifyRequestCall(obj, method, args);\n  return p.then(function(value) {\n    if (!value) return;\n    return new Cursor(value, p.request);\n  });\n}\n\nfunction proxyProperties(ProxyClass, targetProp, properties) {\n  properties.forEach(function(prop) {\n    Object.defineProperty(ProxyClass.prototype, prop, {\n      get: function() {\n        return this[targetProp][prop];\n      },\n      set: function(val) {\n        this[targetProp][prop] = val;\n      }\n    });\n  });\n}\n\nfunction proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return this[targetProp][prop].apply(this[targetProp], arguments);\n    };\n  });\n}\n\nfunction proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction Index(index) {\n  this._index = index;\n}\n\nproxyProperties(Index, '_index', [\n  'name',\n  'keyPath',\n  'multiEntry',\n  'unique'\n]);\n\nproxyRequestMethods(Index, '_index', IDBIndex, [\n  'get',\n  'getKey',\n  'getAll',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(Index, '_index', IDBIndex, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nfunction Cursor(cursor, request) {\n  this._cursor = cursor;\n  this._request = request;\n}\n\nproxyProperties(Cursor, '_cursor', [\n  'direction',\n  'key',\n  'primaryKey',\n  'value'\n]);\n\nproxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n  'update',\n  'delete'\n]);\n\n// proxy 'next' methods\n['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n  if (!(methodName in IDBCursor.prototype)) return;\n  Cursor.prototype[methodName] = function() {\n    var cursor = this;\n    var args = arguments;\n    return Promise.resolve().then(function() {\n      cursor._cursor[methodName].apply(cursor._cursor, args);\n      return promisifyRequest(cursor._request).then(function(value) {\n        if (!value) return;\n        return new Cursor(value, cursor._request);\n      });\n    });\n  };\n});\n\nfunction ObjectStore(store) {\n  this._store = store;\n}\n\nObjectStore.prototype.createIndex = function() {\n  return new Index(this._store.createIndex.apply(this._store, arguments));\n};\n\nObjectStore.prototype.index = function() {\n  return new Index(this._store.index.apply(this._store, arguments));\n};\n\nproxyProperties(ObjectStore, '_store', [\n  'name',\n  'keyPath',\n  'indexNames',\n  'autoIncrement'\n]);\n\nproxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'put',\n  'add',\n  'delete',\n  'clear',\n  'get',\n  'getAll',\n  'getKey',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nproxyMethods(ObjectStore, '_store', IDBObjectStore, [\n  'deleteIndex'\n]);\n\nfunction Transaction(idbTransaction) {\n  this._tx = idbTransaction;\n  this.complete = new Promise(function(resolve, reject) {\n    idbTransaction.oncomplete = function() {\n      resolve();\n    };\n    idbTransaction.onerror = function() {\n      reject(idbTransaction.error);\n    };\n    idbTransaction.onabort = function() {\n      reject(idbTransaction.error);\n    };\n  });\n}\n\nTransaction.prototype.objectStore = function() {\n  return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n};\n\nproxyProperties(Transaction, '_tx', [\n  'objectStoreNames',\n  'mode'\n]);\n\nproxyMethods(Transaction, '_tx', IDBTransaction, [\n  'abort'\n]);\n\nfunction UpgradeDB(db, oldVersion, transaction) {\n  this._db = db;\n  this.oldVersion = oldVersion;\n  this.transaction = new Transaction(transaction);\n}\n\nUpgradeDB.prototype.createObjectStore = function() {\n  return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n};\n\nproxyProperties(UpgradeDB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(UpgradeDB, '_db', IDBDatabase, [\n  'deleteObjectStore',\n  'close'\n]);\n\nfunction DB(db) {\n  this._db = db;\n}\n\nDB.prototype.transaction = function() {\n  return new Transaction(this._db.transaction.apply(this._db, arguments));\n};\n\nproxyProperties(DB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(DB, '_db', IDBDatabase, [\n  'close'\n]);\n\n// Add cursor iterators\n// TODO: remove this once browsers do the right thing with promises\n['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n  [ObjectStore, Index].forEach(function(Constructor) {\n    // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n    if (!(funcName in Constructor.prototype)) return;\n\n    Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n      var args = toArray(arguments);\n      var callback = args[args.length - 1];\n      var nativeObject = this._store || this._index;\n      var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n      request.onsuccess = function() {\n        callback(request.result);\n      };\n    };\n  });\n});\n\n// polyfill getAll\n[Index, ObjectStore].forEach(function(Constructor) {\n  if (Constructor.prototype.getAll) return;\n  Constructor.prototype.getAll = function(query, count) {\n    var instance = this;\n    var items = [];\n\n    return new Promise(function(resolve) {\n      instance.iterateCursor(query, function(cursor) {\n        if (!cursor) {\n          resolve(items);\n          return;\n        }\n        items.push(cursor.value);\n\n        if (count !== undefined && items.length == count) {\n          resolve(items);\n          return;\n        }\n        cursor.continue();\n      });\n    });\n  };\n});\n\nexport function openDb(name, version, upgradeCallback) {\n  var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n  var request = p.request;\n\n  if (request) {\n    request.onupgradeneeded = function(event) {\n      if (upgradeCallback) {\n        upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n      }\n    };\n  }\n\n  return p.then(function(db) {\n    return new DB(db);\n  });\n}\n\nexport function deleteDb(name) {\n  return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/app-config';\nimport { IdChangeCallbackFn } from '../functions';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/app-config';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.complete;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.complete;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../api/create-installation-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../api/generate-auth-token-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(dependencies.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  dependencies: FirebaseDependencies,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(dependencies.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(dependencies.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(dependencies, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  dependencies: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      dependencies,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(dependencies.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(dependencies.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(dependencies.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getId(\n  dependencies: FirebaseDependencies\n): Promise<string> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    dependencies.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(dependencies).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<string> {\n  await completeInstallationRegistration(dependencies.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(dependencies, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../api/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(\n  dependencies: FirebaseDependencies\n): Promise<void> {\n  const { appConfig } = dependencies;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport type IdChangeCallbackFn = (installationId: string) => void;\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n */\nexport function onIdChange(\n  { appConfig }: FirebaseDependencies,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  addCallback(appConfig, callback);\n\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  deleteInstallation,\n  getId,\n  getToken,\n  IdChangeCallbackFn,\n  IdChangeUnsubscribeFn,\n  onIdChange\n} from './functions';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseDependencies } from './interfaces/firebase-dependencies';\n\nimport { name, version } from '../package.json';\n\nexport function registerInstallations(instance: _FirebaseNamespace): void {\n  const installationsName = 'installations';\n\n  instance.INTERNAL.registerComponent(\n    new Component(\n      installationsName,\n      container => {\n        const app = container.getProvider('app').getImmediate();\n\n        // Throws if app isn't configured properly.\n        const appConfig = extractAppConfig(app);\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        const dependencies: FirebaseDependencies = {\n          appConfig,\n          platformLoggerProvider\n        };\n\n        const installations: FirebaseInstallations & FirebaseService = {\n          app,\n          getId: () => getId(dependencies),\n          getToken: (forceRefresh?: boolean) =>\n            getToken(dependencies, forceRefresh),\n          delete: () => deleteInstallation(dependencies),\n          onIdChange: (callback: IdChangeCallbackFn): IdChangeUnsubscribeFn =>\n            onIdChange(dependencies, callback)\n        };\n        return installations;\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterInstallations(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerInstallations`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    installations(app?: FirebaseApp): FirebaseInstallations;\n  }\n  interface FirebaseApp {\n    installations(): FirebaseInstallations;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n// Key of FCM Payload in Notification's data field.\nexport const FCM_MSG = 'FCM_MSG';\nexport const TAG = 'FirebaseMessaging: ';\n\n// Set to '1' if Analytics is enabled for the campaign\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nexport const BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n\n// Preparation time for client to initialize and set up the message handler.\nexport const FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n", "/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n  // eslint-disable-next-line camelcase\n  fcm_message_id: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcm_message_id\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS,\n  DEFAULT_VAPID_KEY,\n  FCM_MSG,\n  FOREGROUND_HANDLE_PREPARATION_TIME_MS,\n  TAG\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | null\n    | BgMessageHandler\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n\n    // wait briefly to allow onBackgroundMessage to complete\n    await sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS);\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport {\n  FirebaseService,\n  _FirebaseNamespace\n} from '@firebase/app-types/private';\n\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { SwController } from './controllers/sw-controller';\nimport { WindowController } from './controllers/window-controller';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport firebase from '@firebase/app';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n", "import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Network headers\n */\nexport interface Headers {\n  [name: string]: string;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface Connection {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Headers,\n  Connection,\n  ErrorCode\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nexport class XhrConnection implements Connection {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport function newConnection(): Connection {\n  return new XhrConnection();\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { Connection } from './connection';\nimport { newConnection } from '../platform/connection';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class ConnectionPool {\n  createConnection(): Connection {\n    return newConnection();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string, host: string): string {\n  const protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  const protocol = protocolMatch?.[1];\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, Connection, ErrorCode } from './connection';\nimport { ConnectionPool } from './connectionPool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingConnection_: Connection | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: Connection, p2: string) => T;\n  private errorCallback_:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: ConnectionPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: Connection, p2: string) => T,\n    errorCallback:\n      | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: ConnectionPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = self.pool_.createConnection();\n      self.pendingConnection_ = connection;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then(() => {\n          if (self.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          self.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const connection = status.connection as Connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(\n            connection,\n            connection.getResponseText()\n          );\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  pool: ConnectionPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, Connection } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: Connection, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => Metadata {\n  function handler(xhr: Connection, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection, p2: string) => ListResult {\n  function handler(xhr: Connection, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => string | null {\n  function handler(xhr: Connection, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getResponseText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: Connection, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo)\n    .then(request => request.getPromise())\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo))\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { ConnectionPool } from './implementation/connectionPool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from '../exp/public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `http://${host}:${port}`;\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   * - protocol://host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _pool: ConnectionPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  get host(): string {\n    return this._host;\n  }\n\n  /**\n   * Set host string for this service.\n   * @param host - host string in the form of host, host:port,\n   * or protocol://host:port\n   */\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<T>(\n    requestInfo: RequestInfo<T>\n  ): Promise<Request<T>> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(requestInfo, authToken, appCheckToken);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot> {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  _Location,\n  connectStorageEmulator,\n  FirebaseStorage\n} from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport { isUrl, FirebaseStorageImpl } from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as FirebaseStorageImpl).host);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { ConnectionPool } from './src/implementation/connectionPool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { FirebaseStorageImpl } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new FirebaseStorageImpl(\n      app,\n      authProvider,\n      appCheckProvider,\n      new ConnectionPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: FirebaseStorageImpl,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { PerformanceController } from './src/controllers/perf';\nimport { setupApi } from './src/services/api_service';\nimport { SettingsService } from './src/services/settings_service';\nimport { ERROR_FACTORY, ErrorCode } from './src/utils/errors';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { name, version } from './package.json';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport function registerPerformance(instance: FirebaseNamespace): void {\n  const factoryMethod = (\n    app: FirebaseApp,\n    installations: FirebaseInstallations\n  ): PerformanceController => {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n    }\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n\n  // Register performance with firebase-app.\n  (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'performance',\n      container => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        // The following call will always succeed because perf has `import '@firebase/installations'`\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factoryMethod(app, installations);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    performance?: {\n      (app?: FirebaseApp): FirebasePerformance;\n    };\n  }\n  interface FirebaseApp {\n    performance?(): FirebasePerformance;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/**\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n *\n * @public\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /**\n   * @deprecated\n   * This event name is deprecated and is unsupported in updated\n   * Enhanced Ecommerce reports.\n   */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag,\n  dataLayerName: string\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig,\n  AnalyticsCallOptions,\n  CustomParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (\n      eventName: string,\n      eventParams?: EventParams | CustomParams,\n      options?: AnalyticsCallOptions\n    ) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName,\n      isSupported\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n\n/**\n * this is a public static method provided to users that wraps four different checks:\n *\n * 1. check if it's not a browser extension environment.\n * 1. check if cookie is enabled in current browser.\n * 3. check if IndexedDB is supported by the browser environment.\n * 4. check if the current browser context is valid for using IndexedDB.\n *\n */\nasync function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [\n      lastSuccessfulFetchTimestampMillis,\n      lastSuccessfulFetchResponse\n    ] = await Promise.all([\n      this.storage.getLastSuccessfulFetchTimestampMillis(),\n      this.storage.getLastSuccessfulFetchResponse()\n    ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: FirebaseInstallations,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  Settings,\n  Value as ValueType,\n  LogLevel as RemoteConfigLogLevel\n} from '@firebase/remote-config-types';\nimport { StorageCache } from './storage/storage_cache';\nimport {\n  RemoteConfigFetchClient,\n  RemoteConfigAbortSignal\n} from './client/remote_config_fetch_client';\nimport { Value } from './value';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { Storage } from './storage/storage';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  // Tracks completion of initialization promise.\n  private _isInitializationComplete = false;\n\n  // De-duplicates initialization calls.\n  private _initializePromise?: Promise<void>;\n\n  settings: Settings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = FirebaseLogLevel.DEBUG;\n        break;\n      case 'silent':\n        this._logger.logLevel = FirebaseLogLevel.SILENT;\n        break;\n      default:\n        this._logger.logLevel = FirebaseLogLevel.ERROR;\n    }\n  }\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    private readonly _client: RemoteConfigFetchClient,\n    private readonly _storageCache: StorageCache,\n    private readonly _storage: Storage,\n    private readonly _logger: Logger\n  ) {}\n\n  async activate(): Promise<boolean> {\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n      this._storage.getLastSuccessfulFetchResponse(),\n      this._storage.getActiveConfigEtag()\n    ]);\n    if (\n      !lastSuccessfulFetchResponse ||\n      !lastSuccessfulFetchResponse.config ||\n      !lastSuccessfulFetchResponse.eTag ||\n      lastSuccessfulFetchResponse.eTag === activeConfigEtag\n    ) {\n      // Either there is no successful fetched config, or is the same as current active\n      // config.\n      return false;\n    }\n    await Promise.all([\n      this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n      this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n    ]);\n    return true;\n  }\n\n  ensureInitialized(): Promise<void> {\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache\n        .loadFromStorage()\n        .then(() => {\n          this._isInitializationComplete = true;\n        });\n    }\n    return this._initializePromise;\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  async fetch(): Promise<void> {\n    // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an AbortError.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding clearTimeout.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n    const abortSignal = new RemoteConfigAbortSignal();\n\n    setTimeout(async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      abortSignal.abort();\n    }, this.settings.fetchTimeoutMillis);\n\n    // Catches *all* errors thrown by client so status can be set consistently.\n    try {\n      await this._client.fetch({\n        cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n        signal: abortSignal\n      });\n\n      await this._storageCache.setLastFetchStatus('success');\n    } catch (e) {\n      const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n        ? 'throttle'\n        : 'failure';\n      await this._storageCache.setLastFetchStatus(lastFetchStatus);\n      throw e;\n    }\n  }\n\n  async fetchAndActivate(): Promise<boolean> {\n    await this.fetch();\n    return this.activate();\n  }\n\n  getAll(): { [key: string]: ValueType } {\n    return getAllKeys(\n      this._storageCache.getActiveConfig(),\n      this.defaultConfig\n    ).reduce((allConfigs, key) => {\n      allConfigs[key] = this.getValue(key);\n      return allConfigs;\n    }, {} as { [key: string]: ValueType });\n  }\n\n  getBoolean(key: string): boolean {\n    return this.getValue(key).asBoolean();\n  }\n\n  getNumber(key: string): number {\n    return this.getValue(key).asNumber();\n  }\n\n  getString(key: string): string {\n    return this.getValue(key).asString();\n  }\n\n  getValue(key: string): ValueType {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\n        `A value was requested for key \"${key}\" before SDK initialization completed.` +\n          ' Await on ensureInitialized if the intent was to get a previously activated value.'\n      );\n    }\n    const activeConfig = this._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n    this._logger.debug(\n      `Returning static value for key \"${key}\".` +\n        ' Define a default or remote value if this is unintentional.'\n    );\n    return new Value('static');\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n    };\n    request.onsuccess = event => {\n      resolve((event.target as IDBOpenDBRequest).result);\n    };\n    request.onupgradeneeded = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { RemoteConfig as RemoteConfigType } from '@firebase/remote-config-types';\nimport { CachingClient } from './src/client/caching_client';\nimport { RestClient } from './src/client/rest_client';\nimport { RemoteConfig } from './src/remote_config';\nimport { Storage } from './src/storage/storage';\nimport { StorageCache } from './src/storage/storage_cache';\nimport { ERROR_FACTORY, ErrorCode } from './src/errors';\nimport { RetryingClient } from './src/client/retrying_client';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { name as packageName, version } from './package.json';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport function registerRemoteConfig(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations').getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      firebaseInstance.SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfig(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    remoteConfigInstance.ensureInitialized();\n\n    return remoteConfigInstance;\n  }\n}\n\nregisterRemoteConfig(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    remoteConfig?: {\n      (app?: FirebaseApp): RemoteConfigType;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigType;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_ACTIVATED = 'already-activated',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_ACTIVATED]:\n    'You are trying to activate AppCheck for FirebaseApp {$appName}, ' +\n    'while it is already activated. ' +\n    'AppCheck can only be activated once.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Please make sure you call activate() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_ACTIVATED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { AppCheckToken, AppCheckTokenResult } from '@firebase/app-check-types';\nimport { AppCheckTokenListener } from '@firebase/app-check-interop-types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred, PartialObserver } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nimport { AppCheckProviderInternal } from './providers';\n\nexport interface AppCheckTokenInternal extends AppCheckToken {\n  issuedAtTimeMillis: number;\n}\n\nexport interface AppCheckTokenObserver\n  extends PartialObserver<AppCheckTokenResult> {\n  // required\n  next: AppCheckTokenListener;\n  type: ListenerType;\n}\n\nexport const enum ListenerType {\n  'INTERNAL' = 'INTERNAL',\n  'EXTERNAL' = 'EXTERNAL'\n}\n\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProviderInternal;\n  siteKey?: string;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  enabled: boolean;\n  // This is the debug token string the user interacts with.\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { base64 } from '@firebase/util';\n\nexport function getRecaptcha(): GreCAPTCHA | undefined {\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './state';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from indexeddb. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to indexeddb. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to indexeddb. Error: ${e}`)\n    );\n    // Not using logger because I don't think we ever want this accidentally hidden?\n    console.log(\n      `AppCheck debug token: ${newToken}. You will need to whitelist it in the Firebase console for it to work`\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  const debugState = getDebugState();\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  AppCheckTokenListener,\n  AppCheckTokenResult\n} from '@firebase/app-check-interop-types';\nimport {\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  getState,\n  ListenerType,\n  setState\n} from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated, formatDummyToken } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { logger } from './logger';\nimport { Provider } from '@firebase/component';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * This function will always resolve.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n\n      setState(app, { ...state, token });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: token.token });\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange: AppCheckTokenInternal = await exchangeToken(\n      getExchangeDebugTokenRequest(app, await getDebugToken()),\n      platformLoggerProvider\n    );\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider!.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const state = getState(app);\n  const tokenListener: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenListener]\n  };\n\n  /**\n   * Invoke the listener with the valid token, then start the token refresher\n   */\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n    newState.tokenRefresher = tokenRefresher;\n  }\n\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => listener({ token: validToken.token }))\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state\n      .cachedTokenPromise! // Storage token promise. Always populated in `activate()`.\n      .then(cachedToken => {\n        if (cachedToken && isValid(cachedToken)) {\n          listener({ token: cachedToken.token });\n        }\n      })\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  }\n\n  setState(app, newState);\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: (token: AppCheckTokenResult) => void\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\nfunction createTokenRefresher(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Refresher {\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(app, platformLoggerProvider);\n      } else {\n        result = await getToken(app, platformLoggerProvider, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      // TODO: when should we retry?\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nfunction notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (ignored) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nexport function initialize(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHA | undefined;\n  }\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { Provider } from '@firebase/component';\nimport { issuedAtTime } from '@firebase/util';\nimport { CustomProviderOptions } from '../../app-check-types';\nimport { exchangeToken, getExchangeRecaptchaTokenRequest } from './client';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getToken as getReCAPTCHAToken,\n  initialize as initializeRecaptcha\n} from './recaptcha';\nimport { AppCheckTokenInternal } from './state';\n\nexport interface AppCheckProviderInternal {\n  /**\n   * Returns an AppCheck token.\n   */\n  getToken(): Promise<AppCheckTokenInternal>;\n  /**\n   * Initialize the class once app and platformLoggerProvider are available.\n   */\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void;\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n */\nexport class ReCaptchaV3Provider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    let attestedClaimsToken;\n    try {\n      attestedClaimsToken = await getReCAPTCHAToken(this._app);\n    } catch (e) {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    return exchangeToken(\n      getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken),\n      this._platformLoggerProvider\n    );\n  }\n\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void {\n    this._app = app;\n    this._platformLoggerProvider = platformLoggerProvider;\n    initializeRecaptcha(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n}\n\n/**\n * Custom provider class.\n */\nexport class CustomProvider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckProvider,\n  AppCheckTokenResult\n} from '@firebase/app-check-types';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, ListenerType } from './state';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, NextFn, PartialObserver, Unsubscribe } from '@firebase/util';\nimport { CustomProvider, ReCaptchaV3Provider } from './providers';\nimport { readTokenFromStorage } from './storage';\n\n/**\n *\n * @param app\n * @param siteKeyOrProvider - optional custom attestation provider\n * or reCAPTCHA provider\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\n * of appCheck token.\n */\nexport function activate(\n  app: FirebaseApp,\n  siteKeyOrProvider:\n    | ReCaptchaV3Provider\n    | CustomProvider\n    // This is the old interface for users to supply a custom provider.\n    | AppCheckProvider\n    | string,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n  if (state.activated) {\n    throw ERROR_FACTORY.create(AppCheckError.ALREADY_ACTIVATED, {\n      appName: app.name\n    });\n  }\n\n  const newState: AppCheckState = { ...state, activated: true };\n\n  // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n    }\n    return cachedToken;\n  });\n\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n  } else if (\n    siteKeyOrProvider instanceof ReCaptchaV3Provider ||\n    siteKeyOrProvider instanceof CustomProvider\n  ) {\n    newState.provider = siteKeyOrProvider;\n  } else {\n    // Process \"old\" custom provider to avoid breaking previous users.\n    // This was defined at beta release as simply an object with a\n    // getToken() method.\n    newState.provider = new CustomProvider({\n      getToken: siteKeyOrProvider.getToken\n    });\n  }\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app, platformLoggerProvider);\n}\n\nexport function setTokenAutoRefreshEnabled(\n  app: FirebaseApp,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n\n/**\n * Differs from internal getToken in that it throws the error.\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    app,\n    platformLoggerProvider,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Wraps addTokenListener/removeTokenListener methods in an Observer\n * pattern for public use.\n */\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    app,\n    platformLoggerProvider,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(app, nextFn);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppCheck,\n  AppCheckProvider,\n  AppCheckTokenResult,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport {\n  activate,\n  setTokenAutoRefreshEnabled,\n  getToken,\n  onTokenChanged\n} from './api';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAppCheckInternal } from '@firebase/app-check-interop-types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { Provider } from '@firebase/component';\nimport { PartialObserver } from '@firebase/util';\n\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { getState, ListenerType } from './state';\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheck & FirebaseService {\n  return {\n    app,\n    activate: (\n      siteKeyOrProvider:\n        | ReCaptchaV3Provider\n        | CustomProvider\n        | AppCheckProvider\n        | string,\n      isTokenAutoRefreshEnabled?: boolean\n    ) =>\n      activate(\n        app,\n        // Public types of ReCaptchaV3Provider/CustomProvider don't\n        // expose getToken() and aren't recognized as the internal\n        // class version of themselves.\n        siteKeyOrProvider as\n          | ReCaptchaV3ProviderImpl\n          | CustomProviderImpl\n          | AppCheckProvider\n          | string,\n        platformLoggerProvider,\n        isTokenAutoRefreshEnabled\n      ),\n    setTokenAutoRefreshEnabled: (isTokenAutoRefreshEnabled: boolean) =>\n      setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled),\n    getToken: forceRefresh =>\n      getToken(app, platformLoggerProvider, forceRefresh),\n    onTokenChanged: (\n      onNextOrObserver:\n        | ((tokenResult: AppCheckTokenResult) => void)\n        | PartialObserver<AppCheckTokenResult>,\n      onError?: (error: Error) => void,\n      onCompletion?: () => void\n    ) =>\n      onTokenChanged(\n        app,\n        platformLoggerProvider,\n        /**\n         * This can still be an observer. Need to do this casting because\n         * according to Typescript: \"Implementation signatures of overloads\n         * are not externally visible\"\n         */\n        onNextOrObserver as (tokenResult: AppCheckTokenResult) => void,\n        onError,\n        onCompletion\n      ),\n    INTERNAL: {\n      delete: () => {\n        const { tokenObservers } = getState(app);\n        for (const tokenObserver of tokenObservers) {\n          removeTokenListener(app, tokenObserver.next);\n        }\n        return Promise.resolve();\n      }\n    }\n  };\n}\n\nexport function internalFactory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh =>\n      getTokenInternal(app, platformLoggerProvider, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(\n        app,\n        platformLoggerProvider,\n        ListenerType.INTERNAL,\n        listener\n      ),\n    removeTokenListener: listener => removeTokenListener(app, listener)\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport {\n  FirebaseAppCheck,\n  AppCheckComponentName,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport { factory, internalFactory } from './factory';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { initializeDebugMode } from './debug';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { name, version } from '../package.json';\n\nconst APP_CHECK_NAME: AppCheckComponentName = 'appCheck';\nconst APP_CHECK_NAME_INTERNAL: AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(firebase: _FirebaseNamespace): void {\n  // The public interface\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ReCaptchaV3Provider: ReCaptchaV3ProviderImpl,\n        CustomProvider: CustomProviderImpl\n      })\n      /**\n       * AppCheck can only be initialized by explicitly calling firebase.appCheck()\n       * We don't want firebase products that consume AppCheck to gate on AppCheck\n       * if the user doesn't intend them to, just because the AppCheck component\n       * is registered.\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on app-check depend on app-check-internal directly,\n       * we need to initialize app-check-internal after app-check is initialized to make it\n       * available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const appCheckInternalProvider = container.getProvider(\n            APP_CHECK_NAME_INTERNAL\n          );\n          appCheckInternalProvider.initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return internalFactory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  firebase.registerVersion(name, version);\n}\n\nregisterAppCheck(firebase as _FirebaseNamespace);\ninitializeDebugMode();\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n    ReCaptchaV3Provider: typeof ReCaptchaV3Provider;\n    CustomProvider: typeof CustomProvider;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { name, version } from '../package.json';\n\nfirebase.registerVersion(name, version, 'app');\nfirebase.SDK_VERSION = version;\n\nexport default firebase;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconsole.warn(`\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n`);\n\nimport firebase from '../app';\nimport { name, version } from '../package.json';\n\nimport '../auth';\nimport '../database';\nimport '../firestore';\nimport '../firestore/bundle';\nimport '../functions';\nimport '../messaging';\nimport '../storage';\nimport '../performance';\nimport '../analytics';\nimport '../remote-config';\nimport '../app-check';\n\nfirebase.registerVersion(name, version);\n\nexport default firebase;\n"],
  "mappings": "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",
  "names": ["version", "DOMStorageWrapper", "name", "MemoryStorage", "sha1", "query", "error", "AppCheckTokenProvider", "_a", "FirebaseAuthTokenProvider", "EmulatorTokenProvider", "RepoInfo", "StatsCollection", "PacketReceiver", "i", "BrowserPollConnection", "FirebaseIFrameScriptHolder", "WebSocketConnection", "TransportManager", "isWebSocketsAvailable", "Connection", "ServerActions", "stats", "EventEmitter", "OnlineMonitor", "Path", "ValidationPath", "child", "VisibilityMonitor", "PersistentConnection", "get", "map", "NamedNode", "Index", "KeyIndex", "SortedMapIterator", "LLRBNode", "LLRBEmptyNode", "SortedMap", "MAX_NODE", "setMaxNode", "LeafNode", "nodeFromJSON", "PriorityIndex", "Base12Num", "base12", "root", "chunkSize", "IndexMap", "ChildrenNode", "key", "predecessor", "MaxNode", "setPriorityMaxNode", "PathIndex", "ValueIndex", "IndexedFilter", "RangedFilter", "self", "LimitedFilter", "QueryParams", "ReadonlyRestClient", "SnapshotHolder", "StatsListener", "StatsReporter", "OperationType", "AckUserWrite", "ListenComplete", "Overwrite", "Merge", "CacheNode", "EventGenerator", "ImmutableTree", "CompoundWrite", "newWriteTree", "write", "ChildChangeAccumulator", "NoCompleteChildSource_", "WriteTreeCompleteChildSource", "newViewCache", "View", "referenceConstructor", "SyncPoint", "SyncTree", "serverCache", "view", "ExistingValueProvider", "DeferredValueProvider", "Tree", "parent", "errorPrefixFxn", "errorPrefix", "EventQueue", "Repo", "queue", "txn", "DataEvent", "ref", "CancelEvent", "CallbackContext", "OnDisconnect", "QueryImpl", "ReferenceImpl", "DataSnapshot", "ValueEventRegistration", "ChildEventRegistration", "QueryConstraint", "QueryEndAtConstraint", "QueryEndBeforeConstraint", "QueryStartAtConstraint", "QueryStartAfterConstraint", "QueryLimitToFirstConstraint", "QueryLimitToLastConstraint", "QueryOrderByChildConstraint", "QueryOrderByKeyConstraint", "QueryOrderByPriorityConstraint", "QueryOrderByValueConstraint", "QueryEqualToValueConstraint", "Database", "forceRestClient", "TransactionResult", "Query", "_ReferenceImpl", "Reference", "_QueryImpl", "ExpOnDisconnect", "_repoManagerDatabaseFromApp", "registerBundle", "instance", "prototype", "loadBundle", "namedQuery", "Firestore", "HttpsErrorImpl", "serializer", "ContextProvider", "_a", "Serializer", "Service", "name", "error", "factory", "version", "Index", "query", "name", "version", "version", "error", "_a", "set", "remove", "update", "installationEntry", "name", "_a", "ERROR_FACTORY", "MessageType", "base64", "db", "DATABASE_NAME", "DATABASE_VERSION", "OBJECT_STORE_NAME", "dbPromise", "getDbPromise", "getKey", "getHeaders", "getToken", "sleep", "SwController", "WindowController", "extractAppConfig", "getMissingValueError", "FirebaseStorageError", "name", "StringData", "DataURLParts", "ErrorCode", "XhrConnection", "ConnectionPool", "Location", "encode", "location", "version", "FailRequest", "error", "canceled", "stop", "NetworkRequest", "self", "RequestEndStatus", "BlobBuilder", "start", "FbsBlob", "child", "Mapping", "_a", "RequestInfo", "getMetadata", "list", "updateMetadata", "deleteObject", "ResumableUploadStatus", "url", "Observer", "UploadTask", "ref", "fbsAsync", "Reference", "uploadBytesResumable", "listAll", "requestsList", "requestsGetMetadata", "requestsUpdateMetadata", "getDownloadURL", "requestsGetDownloadUrl", "requestsDeleteObject", "_getChild", "refFromURL", "connectStorageEmulator", "FirebaseStorageImpl", "uploadBytesResumableInternal", "getMetadataInternal", "updateMetadataInternal", "listInternal", "listAllInternal", "getDownloadURLInternal", "deleteObjectInternal", "refInternal", "_getChildInternal", "connectEmulatorInternal", "UploadTaskSnapshotCompat", "UploadTaskCompat", "ListResultCompat", "ReferenceCompat", "_UploadTask", "_FbsBlob", "StorageServiceCompat", "_Location", "SDK_VERSION", "version", "SERVICE", "SERVICE_NAME", "ERROR_DESCRIPTION_MAP", "_a", "ERROR_FACTORY", "Api", "window", "name", "list", "SettingsService", "VisibilityState", "navigator", "document", "iid", "config", "settingsServiceInstance", "serializer", "logger", "Trace", "PerformanceController", "error", "factoryMethod", "GtagCommand", "EventName", "initializationPromise", "_a", "logger", "dataLayerName", "initializationPromisesMap", "dynamicConfigPromisesList", "measurementIdToAppId", "sendToId", "ERROR_FACTORY", "RetryData", "getHeaders", "AnalyticsAbortSignal", "ERROR_FACTORY", "logger", "factory", "_a", "isSupported", "internalFactory", "name", "version", "CachingClient", "logger", "_a", "ERROR_DESCRIPTION_MAP", "ERROR_FACTORY", "RestClient", "error", "RemoteConfigAbortSignal", "Value", "RemoteConfig", "FirebaseLogLevel", "Storage", "StorageCache", "setAbortableTimeout", "isRetriableError", "RetryingClient", "packageName", "version", "ERRORS", "_a", "ERROR_FACTORY", "Refresher", "sleep", "DB_NAME", "DB_VERSION", "dbPromise", "logger", "getToken", "error", "grecaptcha", "reCAPTCHAState", "ReCaptchaV3Provider", "getReCAPTCHAToken", "initializeRecaptcha", "CustomProvider", "getTokenInternal", "factory", "name", "version", "name", "version"]
}
